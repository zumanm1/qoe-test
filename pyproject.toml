[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "qoe-tool"
description = "A comprehensive web application for monitoring and simulating network Quality of Experience (QoE)"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "QoE Tool Team", email = "admin@qoe-tool.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Telecommunications Industry",
    "Topic :: System :: Networking :: Monitoring",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
dynamic = ["version"]

[tool.black]
# Black code formatter configuration
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | venv
    | _build
    | buck-out
    | build
    | dist
    | node_modules
    | migrations
)/
'''

[tool.pytest.ini_options]
# Pytest configuration
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
]
testpaths = [
    "tests",
    "test_*.py",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
# Coverage.py configuration
source = ["app"]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/tests/*",
    "test_*.py",
    "*_test.py",
    "setup.py",
    "config.py",
]
branch = true
parallel = true

[tool.coverage.report]
# Coverage reporting options
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    
    # Don't complain about abstract methods
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.isort]
# isort import sorting configuration
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_glob = [
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/node_modules/*",
]
known_first_party = ["app"]
known_third_party = [
    "flask",
    "sqlalchemy", 
    "pytest",
    "werkzeug",
    "alembic",
    "requests",
    "pandas",
    "numpy",
    "matplotlib",
    "seaborn"
]

[tool.mypy]
# MyPy static type checking configuration
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "app.migrations.*",
    "tests.*",
]
ignore_errors = true
